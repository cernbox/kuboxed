### SWAN ###

###
# Run all the SWAN containers on a single node:
# - jupyterhub
# - cmvfs
# - eos-fuse mount
# - single-user servers
#
# The deployment with Kuberentes Spawner and DaemonSets for CVMFS and EOS-FUSE should be preferred
###


## SECRETS ###
#
### SSL certificates ###
# Note: These certificates are self-signed and for testing purposes only. Please replace them with proper certificates.
#
# Note: All Kubernetes secrets must be base64 encoded. Please encode your certificates with
#       `cat /path/to/your/certificate.key | base64 -w 0` for Linux-based systems
#       More details available here: https://kubernetes.io/docs/concepts/configuration/secret/
###
apiVersion: v1
kind: Secret
metadata:
  name: swan-certs
  namespace: boxed
type: Opaque
data:
  boxed.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBem5HeDErQ2FyalBWOVM3bWFQK3pqWlZhaXZZdm5acllBQlNIUnoyNis5emE5a1dsCkVUeWxpMzdiVnd0OEdQQnZtZ3RqVU1yK25WTFlETU42K2o0Y1Vrem1RMnFHa0hXN1Q2T3BOM2FNTUVFZ2VnQWUKYzkvU2dQdE9EZUlXK3paaUJUNW80SmpKNDgzRVc1cURDUkQxenRiSnl3WVAvR1ZLTlFpS0RaR3hwU3MxMXYzTgowWGwvM1pGK1J6KzA1dW5uaEIrT2NaT0JKNHUrSlozK2tGbFR5YU5GdENHd2R1N09jWUl3dE1nMXpmWXZpTTFQCnJjYkpUYS9OM1EzR0FHSFBYQzVsZGNyYWFnK1Zib3FtNk83RGk4QzFVNUFMUmRxWE1TMW4yRVpLekprUHdTaUMKem83VElUYjh2SFdFNG1ySU1XVGIvVjRCMjhzeHgyQ2lScDJVTHdJREFRQUJBb0lCQUV0YnYxS1JQNFdGa0gyZQpzQ2IxNkNJdnVjeHVEM1dWbDNGNERPV1ppQTcyVU11RElyMUhDUnNCcEttQ25Mc3gwVnRHK3VyOEhyTnBFVXFmCmROMnlISDZDYWErRVREaWhjVTJoN1Z3OG52SGlaQ3VFclprWXcrdW5VSmZLeHg3T2ZEdHp5NjdvdHhHOEJBaDQKUDRyb3NRSGU3K3gzZXhCa0hSRjgyNEFXaGVWSFZ3WUtTQUVwZFpiczZUVTdwTWhnWEVSNHNJa1kyNFhFazVOVApZRERmU1NOeUt1SXh6RzlVM1hXNHNUSmgyZkFRVXNpa0o1STVmTWh4QURZTVN2TWk2VjZvSTJ5N0NsL1J2eTJtClhnQnZVK0hoazlvNWZFaVdRcksrdUZXWURBWlhhdW1NTFZ1YXUvNlBGNWw1RWRJczZVaHpZc3ZzamRFNy8yWlIKejY3UUg0RUNnWUVBL2U2eGVxbU5KZlVGRUZxTXFBMzVjd1hXWXVDRndEOFJNT0V2Z1dtMnB4SzgzQ3BDa3hpSwpLajZwLzBRbnpQd0R1UWFtZ3NSS3YxbU5mbnFaTldFN2tTcG5WelNLSGFXVjhrR2pYOUVZVzcxWEdMRXJ5RE9mClhwVEIxeUxTelpWNnJZcmZWMnQzS2kwaFJvYXpUWVpWMk1CdW1yME9UMGNyaWRJL2hCbnB1TzhDZ1lFQTBDQUQKMWZYUTh0Zkx6MXNNdVhHUTY1dWc0Q0I1bWk5cUlnQmxLYXQyTzdtNHlsWC9HcDMvSlFoSTlneHhmaXRrMjdWSQpGc2Jvc2wzaU5FSE5HdUo3UjBOSGFjMm4zSjE2dXBzNWtuWmQydmZkQU9wZnA3YWRQL3ZqMS9sZHhTb25zTmZtCjdMUDFlWDNMaDk1ZC9NL1pHZU5rS1lZV3VtMDVmS0x4aFJHWldNRUNnWUJTbzJ0K3o4N3ZtMTJhaE4xaGs2cXEKbEN2QTRmQ2xMK0VZVnpCdW5VaWo5cVVmd1dFSkhlTlkvQ3UydHlkOHZrYzMzOEl3ckZEbkZPM0hTMzZ3c0lRQwpLaHFYZHJHOEZEZElMN1JMYW5EUzZqdDkvYXFSN0xyZ3ZPaVlhdXpQbXVYaHRHQWF3dzUwMjFzSTZLMVJmWFpTCm84MWE3a3ZKNFE5Nk9zSVE2NTMwWVFLQmdRREpiK01taUZnbll0UUJxd2RpeVZkUm92eVBVUDlCUzFqMjlkanoKL3Q5ZHFVRUFuVUZldXNORFRZU0ltTHlVT0YzVEJOOTBKQ3IrMEQxckJMRUdyMlJRTWY4Qm1hbzVyalltUEt6NQpaQlV0SlMvRGZoVDlGNU9WWlRBK1RqNEM0ZTB1alprVlNveHhmVjZyNzM2YWZYV01SL2tlODRnMkFoZGMyYnpYClpaUTlRUUtCZ1FENStpTk5wb0NRT0d1OW1WenkzUlBIa0xjTVo4RW04SUdqQ0pRNTYrWitQT1hTWEEwR3dlQ3EKcG55Wkw2cXJNcWp2VFErWDlNWVdhMmR6R00wSFd4NWFMMVN0UVcyNmYyQTZGNTFZN09FdW9JSnB1YkZxOXJ0QgpsZ1FsUG5rN3MxZkR1Y3FPblZMNDBPd1J3SDc0bTMwLy8zcU1IQlprbXBvQTJtbEdHSCtqRkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  boxed.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBRENDQWVnQ0NRQ1Y4bGJrL1BOYTREQU5CZ2txaGtpRzl3MEJBUXNGQURCQ01Rc3dDUVlEVlFRR0V3SlkKV0RFVk1CTUdBMVVFQnd3TVJHVm1ZWFZzZENCRGFYUjVNUnd3R2dZRFZRUUtEQk5FWldaaGRXeDBJRU52YlhCaApibmtnVEhSa01CNFhEVEUzTURNd056RXhORFF5TjFvWERURTRNRE13TnpFeE5EUXlOMW93UWpFTE1Ba0dBMVVFCkJoTUNXRmd4RlRBVEJnTlZCQWNNREVSbFptRjFiSFFnUTJsMGVURWNNQm9HQTFVRUNnd1RSR1ZtWVhWc2RDQkQKYjIxd1lXNTVJRXgwWkRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTTV4c2RmZwptcTR6MWZVdTVtai9zNDJWV29yMkw1MmEyQUFVaDBjOXV2dmMydlpGcFJFOHBZdCsyMWNMZkJqd2I1b0xZMURLCi9wMVMyQXpEZXZvK0hGSk01a05xaHBCMXUwK2pxVGQyakRCQklIb0FIblBmMG9EN1RnM2lGdnMyWWdVK2FPQ1kKeWVQTnhGdWFnd2tROWM3V3ljc0dEL3hsU2pVSWlnMlJzYVVyTmRiOXpkRjVmOTJSZmtjL3RPYnA1NFFmam5HVApnU2VMdmlXZC9wQlpVOG1qUmJRaHNIYnV6bkdDTUxUSU5jMzJMNGpOVDYzR3lVMnZ6ZDBOeGdCaHoxd3VaWFhLCjJtb1BsVzZLcHVqdXc0dkF0Vk9RQzBYYWx6RXRaOWhHU3N5WkQ4RW9nczZPMHlFMi9MeDFoT0pxeURGazIvMWUKQWR2TE1jZGdva2FkbEM4Q0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBS056ZXJyMGpwTS92NFZoNQp1Yy8vU3B2eEszWjAyeU5TV2ZYU1RUL2RuL1kwRkI4dkJxdkszdjVDV1NXa0Rnejc3WEkvSmRSZDQzcEgzVDJUCnZGMDRoSnVkUTJESGhiZER0cjBZRXdvTlY1TE9QRHhiNnhNbkMvWFRnR09EZ2ZHdGkwWVVBbisycVVNU0J6UksKMGhMeFV6Q0ZnZHEyeFZaOGl0OFVBZm1BNUc4OUlHbDEvWXUxMlhON0h4OFBOMGdyVjBQQXJ5SDZCaVhROGNUYQpjcTAzS0N1ZExhOUluQ2ZyRm9DWjRnSC9TZE50ZXpzT3NFWXA2WHlkZ0xmVlY5V1pTUVNreVFkUUNiV2duYytLCkVmUGkrRzBHTXp6KzFLQkpzbnRTOTVqdUJBVE1ualA2OWZKaUZQcGRlY2VrZ0F2OW1rVmdvYklvdVVHMjJjRW8KbWZtWnhnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  boxed.csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ2h6Q0NBVzhDQVFBd1FqRUxNQWtHQTFVRUJoTUNXRmd4RlRBVEJnTlZCQWNNREVSbFptRjFiSFFnUTJsMAplVEVjTUJvR0ExVUVDZ3dUUkdWbVlYVnNkQ0JEYjIxd1lXNTVJRXgwWkRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU01eHNkZmdtcTR6MWZVdTVtai9zNDJWV29yMkw1MmEyQUFVaDBjOXV2dmMKMnZaRnBSRThwWXQrMjFjTGZCandiNW9MWTFESy9wMVMyQXpEZXZvK0hGSk01a05xaHBCMXUwK2pxVGQyakRCQgpJSG9BSG5QZjBvRDdUZzNpRnZzMllnVSthT0NZeWVQTnhGdWFnd2tROWM3V3ljc0dEL3hsU2pVSWlnMlJzYVVyCk5kYjl6ZEY1ZjkyUmZrYy90T2JwNTRRZmpuR1RnU2VMdmlXZC9wQlpVOG1qUmJRaHNIYnV6bkdDTUxUSU5jMzIKTDRqTlQ2M0d5VTJ2emQwTnhnQmh6MXd1WlhYSzJtb1BsVzZLcHVqdXc0dkF0Vk9RQzBYYWx6RXRaOWhHU3N5WgpEOEVvZ3M2TzB5RTIvTHgxaE9KcXlERmsyLzFlQWR2TE1jZGdva2FkbEM4Q0F3RUFBYUFBTUEwR0NTcUdTSWIzCkRRRUJDd1VBQTRJQkFRQVBzSDB0TGd6TzRjMERDd296Uzl5Y2FmTVY5QWRDYkNIdTJHL3BPdGhnaStWNkY2aTcKMURLMWRuelpXWjhFQVEwaW4wWkFtdlVIVVRsWEdGQ3B5b2hKbGtnczdpd3FRT3A3UjNiQnZhS0hxQitCMWpTZApoSjlwaElzSkFnVXFqVXE2ei9oUDV5RU40OW43YWIreWEzREp5Zm1iR2YxSmNVOC9COE5Hc0JBLzBJc0NRa2NxCmFFTFVncDFCWlg3TFpwSlFwaUVHWnBCME1DUzMvdUV0Z2EyQTJQZHEyWnlDb1NOV3d5dEFvN2lOa3JZdG4rd1AKa1lZWldCZkFjZGZNOVNQaVBnRXRmNnJzRWFBR0J4KzVicDBma0Rtbm1RUE9OZ2ZhT211UEMzZk9XRGdTMmtSQQowZnVRWFU2MjlFOEdpUEQ2QXZCemptcTc1M0VVVzZNanlUQkQKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
#
###


### DEPLOYMENT ###
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: &name swan
  namespace: boxed
  labels:
    app: *name
spec:
  replicas: 1 
  template:
    metadata:
      labels:
        app: *name
        name: *name
    spec:
      terminationGracePeriodSeconds: 300
      hostPID: true
      #hostIPC: true
      nodeSelector:
        nodeApp: *name
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet

      containers:
      ###
      # 1. Fuse mount for EOS
      - name: eos-fuse
        image: gitlab-registry.cern.ch/cernbox/boxedhub/eos-fuse:v0.8
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
        volumeMounts:
        - name: &vm_cgroup cgroup
          mountPath: /sys/fs/cgroup
        - name: &vm_rdv-eos rdv-eos
          mountPath: /eos:shared
        - name: &vm_logs-eosfuse eosfuse-logs
          mountPath: /var/log/eos/fuse
        env:
        ### PodInfo ###
        - name: PODINFO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PODINFO_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PODINFO_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PODINFO_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PODINFO_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        ###
        - name: THIS_CONTAINER
          value: "EOS-FUSE"
        - name: DEPLOYMENT_TYPE
          value: "kubernetes"
        - name: LDAP_ENDPOINT
          value: "ldap.boxed.svc.cluster.local"
        - name: EOS_MGM_ENDPOINT
          value: "eos-mgm.eos-mgm.boxed.svc.cluster.local"
        - name: EOS_INSTANCE_NAME       # Required to unmount (eventual) previous mountpoints
          value: "eosdocker"            # See eos-fuse.d/start.sh --> mounted_folders=...
        - name: EOS_FOLDER
          value: "/eos"
        lifecycle:
          preStop:
            exec:
              command: ["service", "eosd", "stop"]      # Cleans the mount point on the host machine
                                                        # It does not work if the container is abruptly killed

      ###
      # 2. CVMFS (and squid proxy) for ROOT
      - name: cvmfs
        image: gitlab-registry.cern.ch/cernbox/boxedhub/cvmfs:v0.5
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
        volumeMounts:
        - name: &vm_devfuse devfuse
          mountPath: /dev/fuse
        - name: &vm_rdv-cvmfs rdv-cvmfs
          mountPath: /cvmfs:shared
        env:
        ### PodInfo ###
        - name: PODINFO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PODINFO_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PODINFO_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PODINFO_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PODINFO_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        ###
        env:
        - name: THIS_CONTAINER
          value: "CVMFS"
        - name: DEPLOYMENT_TYPE
          value: "kubernetes"
        - name: CVMFS_FOLDER
          value: "/cvmfs"
        - name: SPAWNER_FORM
          value: "complete"

      ###
      # 3. JupyterHub
      - name: jupyterhub
        image: gitlab-registry.cern.ch/swan/docker-images/jupyterhub:v1.8
        imagePullPolicy: IfNotPresent
       #securityContext:
        #  capabilities:
        #    add: ["NET_ADMIN"]         # Enable jupyterhub container to configure iptables
        ports:
        - name: http
          protocol: TCP
          hostPort: &HTTP_PORT 80
          containerPort: *HTTP_PORT
        - name: https
          protocol: TCP
          hostPort: &HTTPS_PORT 443
          containerPort: *HTTPS_PORT
        volumeMounts:
        - name: &vm_swan-certs swan-certs
          mountPath: /etc/boxed/certs
        - name: &vm_docker-socket docker-socket
          mountPath: /var/run/docker.sock
        - name: &vm_logs-jupyterhub jupyterhub-logs
          mountPath: /var/log/jupyterhub 
        - name: &vm_logs-httpd httpd-logs
          mountPath: /var/log/httpd
        - name: &vm_logs-shibboleth shibboleth-logs
          mountPath: /var/log/shibboleth
        - name: &vm_swan-config swan-config
          mountPath: /srv/jupyterhub/jupyterhub_form.complete.html # TODO: /srv/jupyterhub/jupyterhub_form.html ?
          subPath: jupyterhub_form.complete.html
        - name: &vm_swan-config swan-config
          mountPath: /root/jupyterhub_config/kubernetes.py # TODO: /srv/jupyterhub/jupyterhub_config.py ?
          subPath: kubernetes.py
        #- name: rdv-eos        # See notes on EOS-FUSE and CVMFS mounts
        #  mountPath: /eos:shared
        #- name: rdv-cvmfs
        #  mountPath: /cvmfs:shared
        env:
        ### PodInfo ###
        - name: PODINFO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PODINFO_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PODINFO_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PODINFO_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PODINFO_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        ###
        - name: THIS_CONTAINER
          value: "JUPYTERHUB"
        - name: DEPLOYMENT_TYPE
          value: "kubernetes"
        - name: HTTP_PORT
          value: "80"
        - name: HTTPS_PORT
          value: "443"
        - name: HOSTNAME            # Assume JupyterHub is exposed directly on the host where it runs
          valueFrom:                # No Kubernetes services defined
            fieldRef:               # Entrypoint will be: https://<nodeName>
              fieldPath: spec.nodeName
        - name: AUTH_TYPE
          value: "local"
        - name: LDAP_ENDPOINT
          value: "ldap.boxed.svc.cluster.local"
        - name: CONTAINER_IMAGE
          value: "gitlab-registry.cern.ch/swan/docker-images/systemuser:v5.1.1"
        - name: DOCKER_NETWORK_NAME
          value: "jupyternet"
        - name: CVMFS_FOLDER
          value: "/cvmfs"
        - name: EOS_USER_PATH           # This must bring to the folder with the list of initials of users
          value: "/eos/docker/user"     # E.g., "/eos/docker/user" --(will be mapped to)--> "/eos/user" in the container
        - name: CERNBOXGATEWAY_HOSTNAME     # Hostname of CERNBox for Sharing API
          value: "up2kube-cernbox.cern.ch"
        # - name: SPAWNER_FORM
        #   value: "simple"
        #### Customization
        #- name: CUSTOMIZATION_REPO
        #  value: "https://<something>.git"
      # Volumes declaration
      volumes:
      - name: *vm_swan-certs
        secret:
          secretName: swan-certs
          defaultMode: 0644
      - name: *vm_devfuse       # For CVMFS
        hostPath:
          path: /dev/fuse
      - name: *vm_cgroup        # For EOS-FUSE mount
        emptyDir: {}            # Fooling systemd to init the eosd service
        #hostPath:
        #  path: /sys/fs/cgroup
      - name: *vm_docker-socket # For JupyterHub to start single-user containers
        hostPath: 
          path: /var/run/docker.sock
      - name: *vm_rdv-eos
        hostPath:
          path: /eos    # See notes on EOS-FUSE and CVMFS mounts
      - name: *vm_rdv-cvmfs
        hostPath:
          path: /cvmfs  # See notes on EOS-FUSE and CVMFS mounts
      - name: *vm_logs-eosfuse
        hostPath:
          path: /var/kubeVolumes/eosfuse_logs
          type: DirectoryOrCreate
      - name: *vm_logs-jupyterhub
        hostPath:
          path: /var/kubeVolumes/jupyterhub_logs
          type: DirectoryOrCreate
      - name: *vm_logs-httpd
        hostPath:
          path: /var/kubeVolumes/httpd_logs
          type: DirectoryOrCreate
      - name: *vm_logs-shibboleth
        hostPath:
          path: /var/kubeVolumes/shibboleth_logs
          type: DirectoryOrCreate
      - name: *vm_swan-config
        configMap:
          name: swan-config
          items:
          - key: kubernetes.py
            path: kubernetes.py
          - key: jupyterhub_form.complete.html
            path: jupyterhub_form.complete.html

---
### SERVICE ###
# Note: Only needed when hostNetwork is not used, 
#       otherwise JupyterHub is directly accessible on {HTTP, HTTPS}_PORTS
apiVersion: v1
kind: Service
metadata:
  name: &name swan
  namespace: boxed
spec:
  selector:
    app: *name
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30080
    protocol: TCP
  - name: https
    protocol: TCP
    port: 443
    targetPort: 443
    nodePort: 30443
  type: NodePort

###
### Notes on EOS-FUSE and CVMFS mounts ###
# eos-fuse and cvmfs containers mount EOS and CVMFS via fuse mount.
# In order to export such mounts to the host machine or to other containers, 
# they must EXPLICITLY be mounted as shared (or rshared).
# Default configuration for Kubernetes is rprivate, which does not allow 
# mount propagation.
#
# Moreover, EOS and CVMFS mounts must be available on the host machine
# because we leverage on the daemon running on the host to start
# single-user's containers.
# 1--> It is useless to mount EOS/CVMFS on the jupyterhub container as
#       there is no docker daemon running there.
# 2--> The daemon on the host has the context of the host and
#       not the context of the jupyterhub container.
# As a side effect, EOS and CVMFS will be visible on the host machine.
###
###

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: &name swan-config
  namespace: &namespace swan
data:
  kubernetes.py: |-
    # Configuration file for JupyterHub
    import os
    import socket


    ### VARIABLES ###
    # Get configuration parameters from environment variables
    DOCKER_NETWORK_NAME     = os.environ['DOCKER_NETWORK_NAME']
    CVMFS_FOLDER            = os.environ['CVMFS_FOLDER']
    EOS_USER_PATH           = os.environ['EOS_USER_PATH']
    CONTAINER_IMAGE         = os.environ['CONTAINER_IMAGE']
    LDAP_URI                = os.environ['LDAP_URI']
    LDAP_PORT               = os.environ['LDAP_PORT']
    LDAP_BASE_DN            = os.environ['LDAP_BASE_DN']

    c = get_config()

    ### Configuration for JupyterHub ###
    # JupyterHub
    c.JupyterHub.cookie_secret_file = '/srv/jupyterhub/cookie_secret'
    c.JupyterHub.db_url = '/srv/jupyterhub/jupyterhub.sqlite'

    # Logging
    c.JupyterHub.log_level = 'DEBUG'
    c.Spawner.debug = True
    c.LocalProcessSpawner.debug = True

    # Add SWAN look&feel
    c.JupyterHub.template_paths = ['/srv/jupyterhub/jh_gitlab/templates']
    c.JupyterHub.logo_file = '/usr/local/share/jupyterhub/static/swan/logos/logo_swan_cloudhisto.png'

    # Reach the Hub from local httpd (proxypass)
    c.JupyterHub.ip = "127.0.0.1"
    c.JupyterHub.port = 8000

    c.JupyterHub.cleanup_servers = False
    # Use local_home set to true to prevent calling the script that updates EOS tickets
    c.JupyterHub.services = [
        {
            'name': 'cull-idle',
            'admin': True,
            'command': 'python3 /srv/jupyterhub/jh_gitlab/scripts/cull_idle_servers.py --cull_every=600 --timeout=14400 --local_home=True --cull_users=True'.split(),
        }
    ]

    # Proxy
    # Wrap the start of the proxy to allow bigger headers in nodejs
    c.ConfigurableHTTPProxy.command = '/srv/jupyterhub/jh_gitlab/jh_gitlab/scripts/start_proxy.sh'

    # Reach the Hub from Jupyter containers
    # NOTE: Containers are connected to a separate Docker network: DOCKER_NETWORK_NAME
    #       The hub must listen on an IP address that is reachable from DOCKER_NETWORK_NAME
    #       and not on "localhost"||"127.0.0.1" or any other name that could not be resolved
    #       See also c.SwanSpawner.hub_ip_connect (https://github.com/jupyterhub/jupyterhub/issues/291)
    try:
      hub_ip = socket.gethostbyname(socket.getfqdn())
    except:
      print ("WARNING: Unable to identify iface IP from FQDN")
      s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
      s.connect(("8.8.8.8", 80))
      hub_ip = s.getsockname()[0]
    hub_port = 8080
    c.JupyterHub.hub_ip = hub_ip
    c.JupyterHub.hub_port = 8080

    # Load the list of users with admin privileges and enable access
    admins = set(open(os.path.join(os.path.dirname(__file__), 'adminslist'), 'r').read().splitlines())
    c.Authenticator.admin_users = admins
    c.JupyterHub.admin_access = True

    ### User Authentication ###
    if ( os.environ['AUTH_TYPE'] == "shibboleth" ):
        print ("Authenticator: Using user-defined authenticator")
        c.JupyterHub.authenticator_class = '%%%SHIBBOLETH_AUTHENTICATOR_CLASS%%%'
        # %%% Additional SHIBBOLETH_AUTHENTICATOR_CLASS parameters here %%% #

    elif ( os.environ['AUTH_TYPE'] == "local" ):
        print ("Authenticator: Using LDAP")
        c.JupyterHub.authenticator_class = 'ldapauthenticator.LDAPAuthenticator'
        c.LDAPAuthenticator.server_address = LDAP_URI
        c.LDAPAuthenticator.use_ssl = False
        c.LDAPAuthenticator.server_port = int(LDAP_PORT)
        if (LDAP_URI[0:8] == "ldaps://"):
          c.LDAPAuthenticator.use_ssl = True
        c.LDAPAuthenticator.bind_dn_template = 'uid={username},'+LDAP_BASE_DN

    else:
        print ("ERROR: Authentication type not specified.")
        print ("Cannot start JupyterHub.")


    ### Configuration for single-user containers ###

    # Spawn single-user's servers as Docker containers
    c.JupyterHub.spawner_class = 'swanspawner.SwanDockerSpawner'
    c.SwanSpawner.image = CONTAINER_IMAGE
    c.SwanSpawner.remove_containers = True
    c.SwanSpawner.options_form = '/srv/jupyterhub/jupyterhub_form.html'

    # Instruct spawned containers to use the internal Docker network
    c.SwanSpawner.use_internal_ip = True
    c.SwanSpawner.network_name = DOCKER_NETWORK_NAME
    c.SwanSpawner.extra_host_config = { 'network_mode': DOCKER_NETWORK_NAME }

    # Single-user's servers extra config, CVMFS, EOS
    #c.SwanSpawner.extra_host_config = { 'cap_drop': ['NET_BIND_SERVICE', 'SYS_CHROOT']}
    c.SwanSpawner.read_only_volumes = { CVMFS_FOLDER : '/cvmfs' }

    # Local home inside users' containers
    #c.SwanSpawner.local_home = True		# If set to True, user <username> $HOME will be /scratch/<username>/
    c.SwanSpawner.local_home = False
    c.SwanSpawner.volumes = { EOS_USER_PATH : '/eos/user' }
    c.SwanSpawner.available_cores = ["2", "4"]
    c.SwanSpawner.available_memory = ["8", "10"]
    c.SwanSpawner.check_cvmfs_status = False #For now it only checks if available in same place as Jupyterhub.

    c.SwanSpawner.extra_env = dict(
        SHARE_CBOX_API_DOMAIN = "https://%%%CERNBOXGATEWAY_HOSTNAME%%%",
        SHARE_CBOX_API_BASE   = "/cernbox/swanapi/v1",
        HELP_ENDPOINT         = "https://raw.githubusercontent.com/swan-cern/help/up2u/"
    )

    # local_home equal to true to hide the "always start with this config"
    c.SpawnHandlersConfigs.local_home = True
    c.SpawnHandlersConfigs.metrics_on = False #For now the metrics are hardcoded for CERN
    c.SpawnHandlersConfigs.spawn_error_message = """SWAN could not start a session for your user, please try again. If the problem persists, please check:
    <ul>
        <li>Do you have a CERNBox account? If not, click <a href="https://%%%CERNBOXGATEWAY_HOSTNAME%%%" target="_blank">here</a>.</li>
        <li>Check with the service manager that SWAN is running properly.</li>
    </ul>"""

  jupyterhub_form.complete.html: |-
    <style> .nb{ font-weight:normal } </style>
    <style> .nbs{ font-weight:normal; font-size:small } </style>
    <script type="text/javascript">
    <!--
       function toggle_visibility(id) {
          var e = document.getElementById(id);
          if(e.style.display == 'block')
             e.style.display = 'none';
          else
             e.style.display = 'block';
       }
    //-->
    </script>
    <br>
    <label for="placeholder">
    <span class='nb'>Specify the parameters that will be used to contextualise the container which is created for you. See <a target="_blank" href="https://swan.web.cern.ch/content/faq">the online SWAN guide</a> for more details.</span>
    </label>
    <br><br>
    <label for="LCG-rel">Software stack <a href="#" onclick="toggle_visibility('lcgReleaseDetails');"><span class='nbs'>more...</span></a>
    <div style="display:none;" id="lcgReleaseDetails">
       <span class='nb'>The software stack to associate to the container. See the <a target="_blank" href="http://lcginfo.cern.ch/">LCG package info</a> page.</span>
    </div>
    </label>
    <select name="LCG-rel">
       <option style="border-bottom:1px solid rgba(153,153,153,.3); margin:-10px 0 4px 0" disabled="disabled">Recommended releases (General Purpose)</option>
       <option value="LCG_96" selected="">96</option>
       <option value="LCG_96python3">96 Python3</option>
       <option style="border-bottom:1px solid rgba(153,153,153,.3); margin:-10px 0 4px 0" disabled="disabled"></option>
       <option style="border-bottom:1px solid rgba(153,153,153,.3); margin:-10px 0 4px 0" disabled="disabled">Development releases (might be unstable)</option>
       <option value="dev3/latest">Bleeding Edge</option>
       <option value="dev3python3/latest">Bleeding Edge Python3</option>
       <option style="border-bottom:1px solid rgba(153,153,153,.3); margin:-10px 0 4px 0" disabled="disabled"></option>
       <option style="border-bottom:1px solid rgba(153,153,153,.3); margin:-10px 0 4px 0" disabled="disabled">Development releases (GPU)</option>
       <option value="LCG_96py3cu10">Cuda 10 Python3</option>
    </select>
    <br>
    <label for="platform">Platform <a href="#" onclick="toggle_visibility('platformDetails');"><span class='nbs'>more...</span></a>
    <div style="display:none;" id="platformDetails">
       <span class='nb'>The combination of compiler version and flags.</span>
    </div>
    </label>
    <select name="platform">
       <option value="x86_64-centos7-gcc8-opt" selected="">CentOS 7 (gcc8)</option>
    </select>
    <br>
    <label for="scriptenv">Environment script <a href="#" onclick="toggle_visibility('scriptenvDetails');"><span class='nbs'>more...</span></a>
    <div style="display:none;" id="scriptenvDetails">
       <span class='nb'>User-provided bash script to define custom environment variables. The variable CERNBOX_HOME is resolved to the proper /eos/user/u/username directory.</span>
    </div>
    </label>
    <input type="text" name="scriptenv" placeholder="e.g. $CERNBOX_HOME/MySWAN/myscript.sh">
    <br>
    <label for="ncores">Number of cores <a href="#" onclick="toggle_visibility('ncoresDetails');"><span class='nbs'>more...</span></a>
    <div style="display:none;" id="ncoresDetails">
       <span class='nb'>Number of cores to associate to the container.</span>
    </div>
    </label>
    <select name="ncores">
        <option value="2" selected>2</option>
        <option value="4">4</option>
    </select>
    <br>
    <label for="memory">Memory <a href="#" onclick="toggle_visibility('memoryDetails');"><span class='nbs'>more...</span></a>
    <div style="display:none;" id="memoryDetails">
       <span class='nb'>Amount of Memory allocated to the container.</span>
    </div>
    </label>
    <select name="memory">
        <option value="8" selected>8 GB</option>
        <option value="10">10 GB</option>
    </select>
    <input type="hidden" name="spark-cluster" value="none"/>

